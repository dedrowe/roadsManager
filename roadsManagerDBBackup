--
-- PostgreSQL database dump
--

-- Dumped from database version 16.3
-- Dumped by pg_dump version 16.3

-- Started on 2024-07-10 02:02:32

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 2 (class 3079 OID 32768)
-- Name: postgis; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS postgis WITH SCHEMA public;


--
-- TOC entry 5775 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION postgis; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION postgis IS 'PostGIS geometry and geography spatial types and functions';


--
-- TOC entry 250 (class 1255 OID 33860)
-- Name: check_road_intersects(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_road_intersects() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
declare
	existing_road geometry;
	ident int;
	inter geometry;
	i int;

begin
	if not ST_IsSimple(NEW.coordinates) then
		raise exception 'Дорога пересекает сама себя';
	end if;
	for existing_road, ident in select coordinates, id from roads loop
		if NEW.id != ident then
			inter := ST_Intersection(NEW.coordinates, existing_road);

			if not ST_IsEmpty(inter) then
				for i in 1..ST_NPoints(inter) loop
					if not ST_Contains(ST_Points(NEW.coordinates), ST_GeometryN(inter, i)) or not ST_Contains(ST_Points(existing_road), ST_GeometryN(inter, i)) then
						raise exception 'Новая дорога пересекается с уже существующей';
					end if;
				end loop;
			end if;
		end if;
	end loop;
	return new;
end;
$$;


ALTER FUNCTION public.check_road_intersects() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 222 (class 1259 OID 33863)
-- Name: roads; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.roads (
    id integer NOT NULL,
    name character varying(64) NOT NULL,
    coordinates public.geometry NOT NULL
);


ALTER TABLE public.roads OWNER TO postgres;

--
-- TOC entry 221 (class 1259 OID 33862)
-- Name: roads_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.roads_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.roads_id_seq OWNER TO postgres;

--
-- TOC entry 5776 (class 0 OID 0)
-- Dependencies: 221
-- Name: roads_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.roads_id_seq OWNED BY public.roads.id;


--
-- TOC entry 5613 (class 2604 OID 33866)
-- Name: roads id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roads ALTER COLUMN id SET DEFAULT nextval('public.roads_id_seq'::regclass);


--
-- TOC entry 5769 (class 0 OID 33863)
-- Dependencies: 222
-- Data for Name: roads; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.roads (id, name, coordinates) FROM stdin;
\.


--
-- TOC entry 5612 (class 0 OID 33086)
-- Dependencies: 217
-- Data for Name: spatial_ref_sys; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.spatial_ref_sys (srid, auth_name, auth_srid, srtext, proj4text) FROM stdin;
\.


--
-- TOC entry 5777 (class 0 OID 0)
-- Dependencies: 221
-- Name: roads_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.roads_id_seq', 8, true);


--
-- TOC entry 5618 (class 2606 OID 33870)
-- Name: roads roads_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.roads
    ADD CONSTRAINT roads_pkey PRIMARY KEY (id);


--
-- TOC entry 5619 (class 2620 OID 33871)
-- Name: roads road_before_insert; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER road_before_insert BEFORE INSERT OR UPDATE ON public.roads FOR EACH ROW EXECUTE FUNCTION public.check_road_intersects();


-- Completed on 2024-07-10 02:02:32

--
-- PostgreSQL database dump complete
--

